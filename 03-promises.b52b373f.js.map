{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAE6BC,SAASC,cAAc,yDAApD,MACMC,EAAOF,SAASC,cAAc,SAC9BE,EAAcD,EAAKD,cAAc,mBACjCG,EAAaF,EAAKD,cAAc,kBAEhCI,EAAYH,EAAKD,cAAc,iBAyBrC,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAhCbN,EAAKc,iBAAiB,UAAUC,IAC9BA,EAAMC,iBAEN,MAAMC,EAASC,SAASjB,EAAYkB,OAC9BC,EAAQF,SAAShB,EAAWiB,OAC5BE,EAAOH,SAASf,EAAUgB,OAEhC,GAAIF,GAAU,GAAKG,GAAS,GAAKC,GAAQ,EACvC,OAAOC,EAAA1B,GAAS2B,OAAOC,QAAQ,kCAG/B,IAAG,IAAIC,EAAI,EAAGA,GAAKR,EAAQQ,GAAK,EAChCrB,EAAcqB,EAAGL,EAAQK,EAAIJ,GAC1BK,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAA1B,GAAS2B,OAAOI,QAAQ,uBAAqBtB,QAAiBC,MAAU,IAEzEsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAA1B,GAAS2B,OAAOC,QAAQ,sBAAoBnB,QAAeC,MAAU,GACrE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst createPromisesButton = document.querySelector('button[type=\"submit\"],[textContent=\"Create promises\"]');\nconst form = document.querySelector('.form');\nconst amountInput = form.querySelector('[name=\"amount\"]');\nconst delayInput = form.querySelector('[name=\"delay\"]');\n\nconst stepInput = form.querySelector('[name=\"step\"]');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n\n  const amount = parseInt(amountInput.value);\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n\n  if (amount <= 0 || delay <= 0 || step <= 0) {\n    return Notiflix.Notify.failure(`❌ Enter a value greater than 0`);\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay + i * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay)})\n};"],"names":["$7Y9D8","parcelRequire","document","querySelector","$47d4ff9957288465$var$form","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","$parcel$interopDefault","Notify","failure","i","then","success","catch"],"version":3,"file":"03-promises.b52b373f.js.map"}